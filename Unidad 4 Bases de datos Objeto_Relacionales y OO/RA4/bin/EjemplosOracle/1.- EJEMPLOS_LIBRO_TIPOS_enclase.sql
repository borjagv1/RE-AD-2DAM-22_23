CREATE
OR REPLACE TYPE DIRECCION AS OBJECT (
  CALLE VARCHAR2(25),
  CIUDAD VARCHAR2(20),
  CODIGO_POST NUMBER(5)
);

/ -- 
-- 
CREATE
OR REPLACE TYPE PERSONA AS OBJECT (
  CODIGO NUMBER,
  NOMBRE VARCHAR2(35),
  DIREC DIRECCION,
  FECHA_NAC DATE
);

/ --PROBANDO TIPOS
DECLARE DIR DIRECCION := DIRECCION(NULL, NULL, NULL);

P PERSONA := PERSONA(NULL, NULL, NULL, NULL);

DIR2 DIRECCION;

-- SE INICIA CON NEW
P2 PERSONA;

-- SE INICIA CON NEW
BEGIN DIR.CALLE := 'La Mina, 3';

DIR.CIUDAD := 'Guadalajara';

DIR.CODIGO_POST := 19001;

--
P.CODIGO := 1;

P.NOMBRE := 'JUAN';

P.DIREC := DIR;

P.FECHA_NAC := '10/11/1988';

DBMS_OUTPUT.PUT_LINE(
  'NOMBRE: ' || P.NOMBRE || ' * CALLE:' || P.DIREC.CALLE
);

--
DIR2 := NEW DIRECCION ('C/Madrid 10', 'Toledo', 45002);

P2 := NEW PERSONA(2, 'JUAN', DIR2, SYSDATE);

DBMS_OUTPUT.PUT_LINE(
  'NOMBRE: ' || P2.NOMBRE || ' * CALLE: ' || P2.DIREC.CALLE
);

END;

/ -- ACTIVIDAD 1
CREATE
OR REPLACE TYPE DIRECCION AS OBJECT (
  CALLE VARCHAR2(25),
  CIUDAD VARCHAR2(20),
  CODIGO_POST NUMBER(5),
  MEMBER PROCEDURE SET_CALLE(C VARCHAR2),
  MEMBER FUNCTION GET_CALLE RETURN VARCHAR2
);

/ CREATE
OR REPLACE TYPE RECTANGULO AS OBJECT (
  BASE NUMBER,
  ALTURA NUMBER,
  AREA NUMBER,
  CONSTRUCTOR FUNCTION RECTANGULO (BASE NUMBER, ALTURA NUMBER) RETURN SELF AS RESULT
);

/ CREATE
OR REPLACE TYPE BODY DIRECCION AS --
MEMBER PROCEDURE SET_CALLE(C VARCHAR2) IS BEGIN CALLE := C;

END;

--
MEMBER FUNCTION GET_CALLE RETURN VARCHAR2 IS BEGIN RETURN CALLE;

END;

END;

/ ----USO DEL TIPO DIRECCION
DECLARE DIR DIRECCION := DIRECCION(NULL, NULL, NULL);

BEGIN DIR.SET_CALLE('La Mina, 3');

DBMS_OUTPUT.PUT_LINE(DIR.GET_CALLE);

--SIN PARÉNTESIS EL MÉTODO
DIR := NEW DIRECCION ('C/Madrid 10', 'Toledo', 45002);

DBMS_OUTPUT.PUT_LINE(DIR.GET_CALLE());

--CON PARÉNTESIS EL MÉTODO
END;

/ -------------------
CREATE
OR REPLACE TYPE RECTANGULO AS OBJECT (
  BASE NUMBER,
  ALTURA NUMBER,
  AREA NUMBER,
  STATIC PROCEDURE PROC1 (ANCHO INTEGER, ALTO INTEGER),
  MEMBER PROCEDURE PROC2 (ANCHO INTEGER, ALTO INTEGER),
  CONSTRUCTOR FUNCTION RECTANGULO (BASE NUMBER, ALTURA NUMBER) RETURN SELF AS RESULT
);

/ CREATE TABLE TABLAREC (VALOR INTEGER);

/ CREATE
OR REPLACE TYPE BODY RECTANGULO AS -- 
CONSTRUCTOR FUNCTION RECTANGULO (BASE NUMBER, ALTURA NUMBER) RETURN SELF AS RESULT IS BEGIN SELF.BASE := BASE;

SELF.ALTURA := ALTURA;

SELF.AREA := BASE * ALTURA;

RETURN;

END;

--
STATIC PROCEDURE PROC1 (ANCHO INTEGER, ALTO INTEGER) IS BEGIN
INSERT INTO
  TABLAREC
VALUES
  (ANCHO * ALTO);

--ALTURA := ALTO; --ERROR NO SE PUEDE ACCEDER A LOS ATRIBUTOS DEL TIPO
DBMS_OUTPUT.PUT_LINE('FILA INSERTADA');

COMMIT;

END;

--
MEMBER PROCEDURE PROC2 (ANCHO INTEGER, ALTO INTEGER) IS BEGIN SELF.ALTURA := ALTO;

--SE PUEDE ACCEDER A LOS ATRIBUTOS DEL TIPO
SELF.BASE := ANCHO;

AREA := ALTURA * BASE;

INSERT INTO
  TABLAREC
VALUES
  (AREA);

DBMS_OUTPUT.PUT_LINE('FILA INSERTADA');

COMMIT;

END;

END;

/ --
DECLARE R1 RECTANGULO;

R2 RECTANGULO;

R3 RECTANGULO := RECTANGULO(NULL, NULL, NULL);

BEGIN R1 := NEW RECTANGULO(10, 20, 200);

DBMS_OUTPUT.PUT_LINE('AREA R1: ' || R1.AREA);

R2 := NEW RECTANGULO(10, 20);

DBMS_OUTPUT.PUT_LINE('AREA R2: ' || R2.AREA);

R3.BASE := 5;

R3.ALTURA := 15;

R3.AREA := R3.BASE * R3.ALTURA;

DBMS_OUTPUT.PUT_LINE('AREA R3: ' || R3.AREA);

--USO DE LOS M�TODOS DEL TIPO  RECTANGULO
RECTANGULO.PROC1(10, 20);

--LLAMADA AL M�TODO STATIC
--RECTANGULO.PROC2(20, 30); --ERROR, LLAMADA AL M�TODO MEMBER
--R1.PROC1(5, 6);          --ERROR, LLAMADA AL M�TODO STATIC 
R1.PROC2(5, 10);

--LLAMADA AL M�TODO MEMBER
END;

/

--estos ejemplos están en el libro y es hasta la página 211. 
--Aquí cambia lo tipos T_ALUMNO Y PERSONA QUE TENÍAMOS CREADOS, BORRAMOS LOS ANTERIORES Y VOLVEMOS A AÑADIR ESTOS.

CREATE OR REPLACE TYPE PERSONA AS OBJECT
(
  CODIGO NUMBER,
  NOMBRE VARCHAR2(35),
  DIREC DIRECCION,
  FECHA_NAC DATE,
  MAP MEMBER FUNCTION POR_CODIGO RETURN NUMBER
);
/
CREATE OR REPLACE TYPE BODY PERSONA AS
  MAP MEMBER FUNCTION POR_CODIGO RETURN NUMBER IS
  BEGIN
    RETURN CODIGO;
  END;
END;
/
CREATE OR REPLACE TYPE t_alumno AS OBJECT ( /* TODO enter attribute and method declarations here */
    al    persona,
    nota1 NUMBER,
    nota2 NUMBER,
    nota3 NUMBER,
    MEMBER FUNCTION notamedia RETURN NUMBER,
    MEMBER FUNCTION notamaxima RETURN NUMBER
);
/

CREATE OR REPLACE TYPE BODY t_alumno AS
    MEMBER FUNCTION notamedia RETURN NUMBER IS
        media NUMBER;
    BEGIN
        media := ( nota1 + nota2 + nota3 ) / 3;
        RETURN media;
    END;

    MEMBER FUNCTION notamaxima RETURN NUMBER IS
        maxima NUMBER;
    BEGIN
        maxima := greatest(nota1, nota2, nota3);
        RETURN maxima;
    END;

END;
/
-------------comparacion de objetos
DECLARE
  P1 PERSONA := PERSONA(NULL, NULL, NULL, NULL);
  P2 PERSONA := PERSONA(NULL, NULL, NULL, NULL);
BEGIN
  P1.CODIGO := 3;
  P1.NOMBRE := 'JUAN';
  P1.DIREC := DIRECCION('CALLE 1', 'COLONIA 1', '12345');
  P1.FECHA := SYSDATE;
  P2.CODIGO := 1;
  P2.NOMBRE := 'PEDRO';
  P2.DIREC := DIRECCION('CALLE 2', 'COLONIA 2', '54321');
  P2.FECHA := SYSDATE;
  IF P1.POR_CODIGO = P2.POR_CODIGO THEN
    DBMS_OUTPUT.PUT_LINE('SON IGUALES');
  ELSE
    DBMS_OUTPUT.PUT_LINE('SON DIFERENTES');
  END IF;
END;
/
---------------------TABLAS DE OBJETOS -- 
CREATE TABLE ALUMNOS OF PERSONA (
  CODIGO PRIMARY KEY
);
/
--INSERCION DE DATOS
INSERT INTO ALUMNOS VALUES( 
  1, 'Juan Perez ', 
  DIRECCION ('C/Los manantiales 5', 'GUADALAJARA', 19005),
  '18/12/1991'
);

INSERT INTO ALUMNOS (CODIGO, NOMBRE, DIREC, FECHA_NAC) VALUES ( 
  2, 'Julia Bre�a',   
  DIRECCION ('C/Los espartales 25', 'GUADALAJARA', 19004),
  '18/12/1987'
);

--El siguiente bloque PL/SQL inserta una fila en la tabla ALUMNOS:
DECLARE
  DIR DIRECCION := DIRECCION('C/Sevilla 20', 'GUADALAJARA', 19004);
  PER PERSONA := PERSONA(5, 'MANUEL',DIR, '20/10/1987');
BEGIN  
  INSERT INTO ALUMNOS VALUES(PER); --insertar 
  COMMIT; 
END;
/
-------------------

DECLARE
  CURSOR C1 IS SELECT * FROM ALUMNOS;
BEGIN
  FOR I IN C1 LOOP
    DBMS_OUTPUT.PUT_LINE(I.NOMBRE ||
      ' - Calle: '|| I.DIREC.CALLE);
  END LOOP;
END;
/

--mostrar todos los DATAS
DECLARE
    CURSOR C1 IS
        SELECT
            *
        FROM
            ALUMNOS;
BEGIN
    FOR I IN C1 LOOP
        DBMS_OUTPUT.PUT_LINE(I.CODIGO
            || ' '
            || I.NOMBRE
            || ' '
            || I.DIREC.CALLE
            || ' '
            || I.DIREC.CIUDAD
            || ' '
            || I.DIREC.CODIGO_POST
            || ' '
            || I.FECHA);
    END LOOP;
END;
/
--MODIFICAR LA DIRECCION COMPLETA
DECLARE
   D DIRECCION := DIRECCION 
       ('C/Galiano 5','Guadalajara',19004);
BEGIN
    UPDATE ALUMNOS 
       SET direc = D WHERE NOMBRE ='Juan Perez'; 
  COMMIT;
END;
/
--SELECT usando metodo get CALLE
  NOMBRE,
  A.DIREC.GET_CALLE()
FROM
  ALUMNOS A;


