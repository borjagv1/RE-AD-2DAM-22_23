public static void main(String[] args) {
		ejercicio1();
		ejercicio2();
		ejercicio3();
	}

	private static void ejercicio3() {
		SessionFactory sesion = HibernateUtil.getSessionFactory();
		Session session = sesion.openSession();
		Query q = session.createQuery("select codCurso,denominacion,centros.nombre,centros.localidad from Cursos");
		Iterator iter = q.iterate();
		while (iter.hasNext()) {
			Object[] par = (Object[]) iter.next();
			BigInteger codcurso = (BigInteger) par[0];
			String nombrecurso = (String) par[1];
			String nombrecentro = (String) par[2];
			String localidad = (String) par[3];

			System.out.println("COD-CURSO: " + codcurso + " NOMBRE CURSO: " + nombrecurso + "\n" + "NOMBRE CENTRO: "
					+ nombrecentro + " LOCALIDAD: " + localidad);
			Query q2 = session.createQuery(
					"select distinct e.alumnos.numAlumno,e.alumnos.nombre,e.alumnos.notaMedia from Evaluaciones e,Cursos c where e.alumnos.cursos = c and c.codCurso = "
							+ codcurso + " order by 1");
			Iterator iter2 = q2.iterate();
			System.out.println("NUM_ALUMNO NOMBRE                         NOTA_EVA1 NOTA_EVA2 NOTA_EVA3 NOTA-MEDIA");
			while (iter2.hasNext()) {
				Object[] par2 = (Object[]) iter2.next();
				BigInteger numeroalumno = (BigInteger) par2[0];
				String nombrealumno = (String) par2[1];
				BigDecimal notamedia = (BigDecimal) par2[2];
				
				Query q3 = session.createQuery(
						"select e.id.codEvaluacion,round(sum(e.nota)/count(e.nota),2) from Evaluaciones e,Cursos c where e.alumnos.cursos = c and c.codCurso = " + codcurso + " and e.alumnos.numAlumno = " + numeroalumno + " group by e.alumnos.numAlumno,e.id.codEvaluacion order by e.alumnos.numAlumno,e.id.codEvaluacion");
				Iterator iter3 = q3.iterate();
				HashMap<Object, Object> x = new HashMap<Object, Object> ();
				while (iter3.hasNext()) {
					Object[] par3 = (Object[]) iter3.next();
					if(par3[1] == null)
						par3[1] = 0;
					x.put(par3[0], par3[1]);
				}
				
				System.out.printf("%-10s %-30s %-9s %-9s %-9s %-9s %n",numeroalumno,nombrealumno,x.get(BigInteger.valueOf(1)),x.get(BigInteger.valueOf(2)),x.get(BigInteger.valueOf(3)),notamedia);
			}
			System.out.println("-----------------------------------------------------------------------------------------------------------");
			Query q4 = session.createQuery("select a.notaMedia,a.nombre from Alumnos a,Cursos c where a.cursos.codCurso = " + codcurso + " order by 1 asc");
			Iterator iter4 = q4.iterate();
			String nombre = "";
			BigDecimal nota = new BigDecimal(0.0);;
			while (iter4.hasNext()) {
				Object[] par4 = (Object[]) iter4.next();
				nota = (BigDecimal) par4[0];
				nombre = (String) par4[1];
			}
			System.out.println("Alumno con más nota media: " + nombre  + " con nota media: " + nota);
		}
	}

	private static void ejercicio2() {
		SessionFactory sesion = HibernateUtil.getSessionFactory();
		Session session = sesion.openSession();
		Transaction tx = session.beginTransaction();
		Scanner sc = new Scanner(System.in);
		int code, numa, codasig;
		double nota;
		EvaluacionesId evaId = new EvaluacionesId();
		Evaluaciones eva = new Evaluaciones();
		while (true) {
			System.out.println("Cod Evaluacion (1 y 3, 0 para terminar):");
			code = sc.nextInt();
			if (1 <= code && code <= 3) {
				evaId.setCodEvaluacion(BigInteger.valueOf(code));
				break;
			} else if (code == 0) {
				System.exit(0);
			}
		}
		while (true) {
			System.out.println("Número de alumno (> 0):");
			numa = sc.nextInt();
			Alumnos alum = new Alumnos();
			try {
				alum = (Alumnos) session.load(Alumnos.class, BigInteger.valueOf(numa));
				alum.getNombre();
				eva.setAlumnos(alum);
				evaId.setNumAlumno(BigInteger.valueOf(numa));
				break;
			} catch (ObjectNotFoundException o) {
				System.out.println("El alumno " + numa + " no existe");
			}
		}
		while (true) {
			// sql para sacar las asignaturas alum
			Query q = session.createQuery(
					"select g.codAsig from Asignaturas g,Alumnos a where g.cursos = a.cursos and a.numAlumno = " + numa
							+ " order by 1");
			List<Integer> asig = q.list();
			System.out.print("Cod de Asig (> 0): (Asignaturas para el alumno: ");
			for (int i = 0; i < asig.size(); i++) {
				System.out.print(asig.get(i) + " ");
			}
			System.out.println();
			codasig = sc.nextInt();
			Query q2 = session
					.createQuery("select e.asignaturas.codAsig from Evaluaciones e where  e.alumnos.numAlumno = " + numa
							+ " and e.id.codEvaluacion = " + code + " and e.asignaturas.codAsig = " + codasig);
			Long probar = (Long) q2.uniqueResult();
			if (probar == null) {
				Asignaturas asignatura = new Asignaturas(BigInteger.valueOf(codasig));
				eva.setAsignaturas(asignatura);
				evaId.setCodAsig(BigInteger.valueOf(codasig));
				eva.setId(evaId);
				break;
			}
		}
		while (true) {
			System.out.println("Introduce la nota(entre 1 y 10):");
			nota = sc.nextDouble();
			if (nota >= 1 && nota <= 10) {
				eva.setNota(BigDecimal.valueOf(nota));
				break;
			}
		}
		Evaluaciones eva2 = new Evaluaciones();
		try {
			eva2 = (Evaluaciones) session.load(Evaluaciones.class, (EvaluacionesId) evaId);
			eva2.getAlumnos();
			System.out.println("La evaluacion de " + eva2.getId().getCodEvaluacion() + " del alumno "
					+ eva2.getId().getNumAlumno() + " ya existe");
		} catch (ObjectNotFoundException o) {
			session.save(eva);
			tx.commit();
			System.out.println("Se añadio la evaluacion");
		}
	}

	private static void ejercicio1() {
		ejercicio1a();
		ejercicio1b();
		ejercicio1c();

	}

	private static void ejercicio1c() {
		SessionFactory sesion = HibernateUtil.getSessionFactory();
		Session session = sesion.openSession();
		Transaction tx = session.beginTransaction();
		Query q = session.createQuery("from Alumnos");
		List<Alumnos> lista = q.list();
		// Obtenemos un Iterador y recorremos la lista.
		Iterator<Alumnos> iter = lista.iterator();
		while (iter.hasNext()) {
			Alumnos alum = (Alumnos) iter.next();
			Query q2 = session.createQuery(
					"select round(sum(nota)/count(alumnos.numAlumno),2) from Evaluaciones where alumnos.numAlumno = "
							+ alum.getNumAlumno());
			BigDecimal media = (BigDecimal) q2.uniqueResult();
			if (media == null)
				media = BigDecimal.valueOf(0);
			alum.setNotaMedia(media);
			session.update(alum);
		}
		tx.commit();
	}

	private static void ejercicio1b() {
		SessionFactory sesion = HibernateUtil.getSessionFactory();
		Session session = sesion.openSession();
		Transaction tx = session.beginTransaction();
		Query q = session.createQuery("from Departamentos");
		List<Departamentos> lista = q.list();
		// Obtenemos un Iterador y recorremos la lista.
		Iterator<Departamentos> iter = lista.iterator();
		while (iter.hasNext()) {
			Departamentos dep = (Departamentos) iter.next();
			Query q2 = session.createQuery(
					"select count(codAsig) from Asignaturas where departamentos.codDepar = " + dep.getCodDepar());
			Long numa = (Long) q2.uniqueResult();
			dep.setNumAsig(BigInteger.valueOf(numa));
			session.update(dep);

		}
		tx.commit();

	}

	private static void ejercicio1a() {
		SessionFactory sesion = HibernateUtil.getSessionFactory();
		Session session = sesion.openSession();
		Transaction tx = session.beginTransaction();
		actualizaCursos();
		Query q = session.createQuery("from Centros");
		List<Centros> lista = q.list();
		// Obtenemos un Iterador y recorremos la lista.
		Iterator<Centros> iter = lista.iterator();
		while (iter.hasNext()) {
			Centros cen = (Centros) iter.next();
			Query q2 = session
					.createQuery("select count(codCurso),sum(numAlumnos) from Cursos where centros.codCentro = "
							+ cen.getCodCentro());
			Iterator iter2 = q2.iterate();
			while (iter2.hasNext()) {
				Object[] par = (Object[]) iter2.next();
				Long cursos = (Long) par[0];
				BigInteger alumnos;
				if (par[1] == null) {
					alumnos = BigInteger.valueOf(0);
				} else {
					alumnos = (BigInteger) par[1];
				}
				cen.setNumCursos(BigInteger.valueOf(cursos));
				cen.setNumAlumnos(alumnos);
				session.update(cen);
			}
		}
		tx.commit();
	}

	private static void actualizaCursos() {
		SessionFactory sesion = HibernateUtil.getSessionFactory();
		Session session = sesion.openSession();
		Transaction tx = session.beginTransaction();
		Query q = session.createQuery("from Cursos");
		List<Cursos> lista = q.list();
		// Obtenemos un Iterador y recorremos la lista.
		Iterator<Cursos> iter = lista.iterator();
		while (iter.hasNext()) {
			Cursos cur = (Cursos) iter.next();
			Query q2 = session
					.createQuery("select count(numAlumno) from Alumnos where cursos.codCurso = " + cur.getCodCurso());
			Long numa = (Long) q2.uniqueResult();
			cur.setNumAlumnos(BigInteger.valueOf(numa));
			session.update(cur);

		}

	}